# =============================
# Declarative Configuration
# =============================
- hosts: kafka
  become: yes
  vars_files:
    - vars/declarative.yml
    - vars/secrets.yml

  tasks:
    - name: Create directory for declarative definitions
      file:
        path: /home/ubuntu/iot_declarative
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    # ---- Declarative assets ----
    - name: Create processor configuration file (ConfigMap equivalent)
      copy:
        dest: /home/ubuntu/iot_declarative/processor_config.env
        content: |
          KAFKA_BROKER=kafka:9092
          MONGO_URI=mongodb://{{ lookup('env','MONGO_USER') }}:{{ lookup('env','MONGO_PASS') }}@mongo:27017
          TOPIC=transactions
          LOG_LEVEL=INFO
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Ensure pip for Python 3 is installed (on Kafka manager)
      apt:
        name: python3-pip
        state: present
        update_cache: yes

    - name: Ensure Docker SDK for Python is installed
      pip:
        name: docker
        state: present

    - name: Template Swarm stack file (declarative Compose v3)
      template:
        src: templates/iot_stack.yml.j2
        dest: /home/ubuntu/iot_declarative/iot_stack.yml
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Ensure jsondiff dependency is installed for Ansible docker_stack
      pip:
        name: jsondiff
        state: present

    - name: Deploy declarative Swarm stack
      community.docker.docker_stack:
        name: iot_stack
        state: present
        compose:
          - /home/ubuntu/iot_declarative/iot_stack.yml

#==================
# Smoke test
#==================

    - name: Show running Swarm services
      tags: [verification, smoke]
      shell: docker service ls
      register: swarm_services
      changed_when: false

    - debug:
        var: swarm_services.stdout_lines
      tags: [verification, smoke]


    - name: Check processor logs (declarative stack)
      tags: [verification, smoke]
      shell: docker service logs --tail 20 iot_stack_processor || true
      register: processor_logs
      changed_when: false

    - debug:
        var: processor_logs.stdout_lines
      tags: [verification, smoke]

    - name: Verify Mongo document count (declarative)
      tags: [verification, smoke]
      shell: |
        cid=$(docker ps -qf "name=iot_stack_mongo")
        [ -n "$cid" ] && docker exec "$cid" mongosh --quiet --eval "db.getSiblingDB('transactions_db').transactions.countDocuments()" || echo "mongo container not running"
      register: mongo_count
      changed_when: false

    - debug:
        var: mongo_count.stdout_lines
      tags: [verification, smoke]
